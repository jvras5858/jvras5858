# GitHub Action para gerar um gráfico de contribuição com uma snake comendo suas contribuições.
name: Generate Snake

# Controla quando a ação será executada. Esta ação é executada a cada 12 horas e também em cada push na branch main.
on:
  schedule:
      # a cada 12 horas
    - cron: "0 */12 * * *"

  # Este comando nos permite executar a ação automaticamente na guia Actions.
  workflow_dispatch:
  
  # Executa também a cada push na branch main
  push:
    branches:
    - main

# Sequência de execuções:
jobs:
  # Este fluxo de trabalho contém um único trabalho chamado "build"
  build:
    # O tipo de executor em que o trabalho será executado
    runs-on: ubuntu-latest

    # representam uma sequência de tarefas que serão executadas como parte do job "trabalho"
    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      # Gera a cobra 
      - uses: Platane/snk@v3
        id: snake-gif
        with:
          github_user_name: ${{ github.repository_owner }} # Fornecido pelo proprio github Não precisa fazer nada!
          outputs: |
            dist/github-contribution-grid-snake.svg
            dist/github-contribution-grid-snake-dark.svg?palette=github-dark
            dist/github-contribution-grid-snake.gif?color_snake=orange&color_dots=#bfd6f6,#8dbdff,#64a1f4,#4b91f1,#3c7dd9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Fornecido pelo proprio github Não precisa fazer nada!
      
      # mostrar o status da construção. Facilita a depuração (se houver algum problema).
      - name: Show build status
        run: git status

      - name: Push new files to output branch 
        uses: crazy-max/ghaction-github-pages@v3.1.0
        with:
          # o ramo de output que mencionamos acima
          target_branch: output
          build_dir: dist
          commit_message: Update snake animations
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Fornecido pelo proprio github Não precisa fazer nada!

  metrics-achievements:
    runs-on: ubuntu-latest
    steps:
      - name: Achievements metrics
        uses: lowlighter/metrics@master
        with:
          filename: metrics.plugin.achievements.svg
          token: ${{ secrets.ACCESS_TOKEN }} # adicione secrets.ACCESS_TOKEN aos segredos do seu repositório ( [ Gere o token: https://github.com/settings/tokens] com permissões de visualização de metricas / [ Adicione ao segredos - https://github.com/@seuUser/@seuUser/settings/secrets/actions ] )
          base: ""
          plugin_achievements: yes
          plugin_achievements_threshold: B       # Exibi conquistas com classificação B ou superior
          plugin_achievements_secrets: yes       # Exibi conquistas de segredos desbloqueados
          plugin_achievements_ignored: octonaut  # Oculta conquista do octonauta
          plugin_achievements_limit: 0           # Exibi todos os limites de correspondência de conquistas desbloqueadas e parâmetros de segredos

  metrics-github:
    runs-on: ubuntu-latest
    steps:
      - name: Github metrics
        uses: lowlighter/metrics@latest
        with:
          token: ${{ secrets.ACCESS_TOKEN }}  # Já explicado lá em cima é o mesmo token não precisa fazer outro....